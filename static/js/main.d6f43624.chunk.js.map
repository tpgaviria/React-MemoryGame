{"version":3,"sources":["components/Header/HeroImage/HeroImage.js","components/Header/Header.js","components/Game/ClickTile/ClickTile.js","components/Game/Container/Container.js","components/Game/ScoreBar/ScoreBar.js","components/Game/Game.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["HeroImage","props","react_default","a","createElement","Header","className","Header_HeroImage_HeroImage","ClickTile","onClick","handleClick","id","style","backgroundImage","concat","image","Container","children","ScoreBar","score","highScore","Game","state","characters","shuffleCharacters","console","log","i","length","j","Math","floor","random","_ref","correctGuess","newCharacterData","_this","map","character","characterArray","Object","objectSpread","clicked","handleCorrectGuess","handleIncorrectGuess","_this$state","newScore","newHighScore","setState","restartGame","reset","this","_this2","Game_ScoreBar_ScoreBar","Game_Container_Container","Game_ClickTile_ClickTile","key","React","Component","Footer","href","title","App","components_Header_Header","components_Game_Game","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6f43624.chunk.js","sourcesContent":["import React from 'react';\nimport './HeroImage.css';\n\nconst HeroImage = props => <h1>Space Memory Game!</h1>\n\n\nexport default HeroImage;","import React from 'react';\nimport './Header.css';\nimport HeroImage from './HeroImage/HeroImage';\n\nconst Header = props => (\n    <header className=\"header\">\n        <HeroImage />\n        <h2 className=\"instructions\">Click on each image, but only once!</h2>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./ClickTile.css\";\n\nconst ClickTile = props => (\n    <div\n        onClick={() => props.handleClick(props.id)}\n        style={{ backgroundImage: `url(${props.image})` }}\n        className=\"click-tile\"\n    />\n);\n\nexport default ClickTile;","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <main className=\"container\">{props.children}</main>;\n\nexport default Container;","import React from 'react';\nimport './ScoreBar.css';\n\nconst ScoreBar = props =>\n    <nav className=\"navbar\">\n        <h5>Current Score: {props.score}</h5>\n        <h5>High Score: {props.highScore}</h5>\n    </nav>\n\nexport default ScoreBar;","import React from \"react\";\nimport ClickTile from \"./ClickTile\";\nimport Container from \"./Container\";\nimport ScoreBar from \"./ScoreBar\";\nimport characters from \"../../characters.json\";\nimport './Game.css';\n\nclass Game extends React.Component {\n    state = {\n        characters,\n        score: 0,\n        highScore: 0\n    };\n\n    componentDidMount() {\n        this.setState({ characters: this.shuffleCharacters(this.state.characters) });\n    }\n\n    shuffleCharacters = characters => {\n        console.log('shuffled');\n        for (let i = characters.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [characters[i], characters[j]] = [characters[j], characters[i]];\n        }\n        return characters;\n    };\n\n    handleClick = id => {\n        console.log('handleclick');\n        let correctGuess = false;\n        const newCharacterData = this.state.characters.map(character => {\n            const characterArray = { ...character };\n            if (characterArray.id === id) {\n                if (!characterArray.clicked) {\n                    characterArray.clicked = true;\n                    correctGuess = true;\n                }\n            }\n            return characterArray;\n        });\n        console.log(correctGuess);\n        correctGuess ? this.handleCorrectGuess(newCharacterData) : this.handleIncorrectGuess(newCharacterData);\n    }\n\n    handleCorrectGuess = newCharacterData => {\n        console.log('correct');\n        const { highScore, score } = this.state;\n        const newScore = score + 1;\n        const newHighScore = newScore > highScore ? newScore : highScore;\n        this.setState({\n            characters: this.shuffleCharacters(newCharacterData),\n            score: newScore,\n            highScore: newHighScore\n        })\n    };\n\n    handleIncorrectGuess = newCharacterData => {\n        this.setState({\n            characters: this.restartGame(newCharacterData),\n            score: 0\n        })\n    }\n\n    restartGame = characters => {\n        const reset = characters.map(character => ({ ...character, clicked: false }));\n        return this.shuffleCharacters(reset);\n    }\n\n    render() {\n        return (\n            <div>\n                <ScoreBar score={this.state.score} highScore={this.state.highScore} />\n                <Container>\n                    {this.state.characters.map(character => (\n                        <ClickTile\n                            key={character.id}\n                            id={character.id}\n                            handleClick={this.handleClick}\n                            image={character.image}\n                        />\n                    ))}\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = props => (\n    <footer className=\"footer\">\n        <div>Icons made by <a href=\"https://www.flaticon.com/authors/darius-dan\" title=\"Darius Dan\">Darius Dan</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n    </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Header from './components/Header';\nimport Game from './components/Game/Game';\nimport Footer from './components/Footer';\n\nconst App = () =>\n  <div>\n    <Header />\n    <Game />\n    <Footer />\n  </div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}